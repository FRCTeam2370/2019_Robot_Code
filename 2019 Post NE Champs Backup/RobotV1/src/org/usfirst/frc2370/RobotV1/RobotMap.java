// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2370.RobotV1;

import org.usfirst.frc2370.RobotV1.RotarySwitchMode;

import com.kauailabs.navx.frc.AHRS;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.DigitalInput;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon driveSubsystemLeftA;
    public static CANTalon driveSubsystemLeftB;
    public static CANTalon driveSubsystemRightA;
    public static CANTalon driveSubsystemRightB;
    public static RobotDrive driveSubsystemRobotDrive4;
    public static CANTalon armPIDSubsystemArm;
    public static Encoder armPIDSubsystemArmEncoder;
    public static SpeedController armPIDSubsystemArmPWN;
    public static CANTalon shooterLeftShooterMotor;
    public static CANTalon shooterRightShooterMotor;
    public static AnalogInput shooterDistanceSensor1;
    public static SpeedController shooterRoller;
    public static SpeedController shooterBackRoller;
    public static CANTalon winchSubsystemWinch1Motor;
    public static CANTalon winchSubsystemWinch2Motor;
    public static CANTalon hookLifterSubsystemHookLifterMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DigitalInput autonomousSelectionMode1;
    public static DigitalInput autonomousSelectionMode2;
    public static DigitalInput autonomousSelectionMode3;

    
    
	//public static AHRS AHRS = new AHRS(SPI.Port.kMXP);

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSubsystemLeftA = new CANTalon(10);
        LiveWindow.addActuator("driveSubsystem", "LeftA", driveSubsystemLeftA);
        
        driveSubsystemLeftB = new CANTalon(11);
        LiveWindow.addActuator("driveSubsystem", "LeftB", driveSubsystemLeftB);
        
        driveSubsystemRightA = new CANTalon(12);
        LiveWindow.addActuator("driveSubsystem", "RightA", driveSubsystemRightA);
        
        driveSubsystemRightB = new CANTalon(13);
        LiveWindow.addActuator("driveSubsystem", "RightB", driveSubsystemRightB);
        
        driveSubsystemRobotDrive4 = new RobotDrive(driveSubsystemLeftA, driveSubsystemLeftB,
              driveSubsystemRightA, driveSubsystemRightB);
        
        driveSubsystemRobotDrive4.setSafetyEnabled(false);
        driveSubsystemRobotDrive4.setExpiration(0.1);
        driveSubsystemRobotDrive4.setSensitivity(0.5);
        driveSubsystemRobotDrive4.setMaxOutput(1.0);
        driveSubsystemRobotDrive4.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        driveSubsystemRobotDrive4.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        armPIDSubsystemArm = new CANTalon(14);
        LiveWindow.addActuator("ArmPIDSubsystem", "Arm", armPIDSubsystemArm);
        
        armPIDSubsystemArmEncoder = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("ArmPIDSubsystem", "ArmEncoder", armPIDSubsystemArmEncoder);
        armPIDSubsystemArmEncoder.setDistancePerPulse(1.0);
        armPIDSubsystemArmEncoder.setPIDSourceType(PIDSourceType.kDisplacement);
        armPIDSubsystemArmPWN = new Talon(8);
        LiveWindow.addActuator("ArmPIDSubsystem", "ArmPWN", (Talon) armPIDSubsystemArmPWN);
        
        shooterLeftShooterMotor = new CANTalon(18);
        LiveWindow.addActuator("Shooter", "LeftShooterMotor", shooterLeftShooterMotor);
        
        shooterRightShooterMotor = new CANTalon(19);
        LiveWindow.addActuator("Shooter", "RightShooterMotor", shooterRightShooterMotor);
        
        shooterDistanceSensor1 = new AnalogInput(0);
        LiveWindow.addSensor("Shooter", "DistanceSensor1", shooterDistanceSensor1);
        
        shooterRoller = new Talon(9);
        LiveWindow.addActuator("Shooter", "Roller", (Talon) shooterRoller);
        
        shooterBackRoller = new Talon(0);
        LiveWindow.addActuator("Shooter", "Back Roller", (Talon) shooterBackRoller);
        
        winchSubsystemWinch1Motor = new CANTalon(15);
        LiveWindow.addActuator("WinchSubsystem", "Winch1Motor", winchSubsystemWinch1Motor);
        
        winchSubsystemWinch2Motor = new CANTalon(16);
        LiveWindow.addActuator("WinchSubsystem", "Winch2Motor", winchSubsystemWinch2Motor);
        
        hookLifterSubsystemHookLifterMotor = new CANTalon(17);
        LiveWindow.addActuator("HookLifterSubsystem", "HookLifterMotor", hookLifterSubsystemHookLifterMotor);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        
        autonomousSelectionMode1 = new DigitalInput(7);
        autonomousSelectionMode2 = new DigitalInput(8);
        autonomousSelectionMode3 = new DigitalInput(9);        
    }

    public static RotarySwitchMode AutonomousMode()
    {
    	if (!autonomousSelectionMode1.get())
    	{
    		return RotarySwitchMode.A;
    	}
    	else if (!autonomousSelectionMode2.get())
    	{
    		return RotarySwitchMode.B;
    	}
    	else if (!autonomousSelectionMode3.get())
    	{
    		return RotarySwitchMode.C;
    	}
    	else
    	{
    		return RotarySwitchMode.D;
    	}
    }
 



}
