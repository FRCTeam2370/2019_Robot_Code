// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2370.RobotV1.subsystems;

import org.usfirst.frc2370.RobotV1.RobotMap;
import org.usfirst.frc2370.RobotV1.commands.*;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 *
 */
public class ArmPIDSubsystem extends PIDSubsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon arm = RobotMap.armPIDSubsystemArm;
    private final Encoder armEncoder = RobotMap.armPIDSubsystemArmEncoder;
    private final SpeedController armPWN = RobotMap.armPIDSubsystemArmPWN;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Initialize your subsystem here
    public ArmPIDSubsystem() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("ArmPIDSubsystem", 0.01, 0.001, 0.0);
        setAbsoluteTolerance(10.0);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("ArmPIDSubsystem", "PIDSubsystem Controller", getPIDController());
        getPIDController().setOutputRange(-0.4, 0.4);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        //super("ArmPIDSubsystem", 0.075, 0.001, 0.0);
        //setAbsoluteTolerance(5.0);
        //getPIDController().setContinuous(false);
        //LiveWindow.addActuator("ArmPIDSubsystem", "PIDSubsystem Controller", getPIDController());
        //getPIDController().setOutputRange(-0.6, 0.6);
        
        
        // Use these to get going:
        setSetpoint(50); 
        enable();
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return armEncoder.pidGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        arm.pidWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
}
